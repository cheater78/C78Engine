# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -Isrc -Ivendor/entt/single_include -Ivendor/glm/glm -Ivendor/imgui -Ivendor/spdlog/include -Ivendor/stb -Ivendor/tinyobjloader -Ivendor/VulkanSDK/Include -Ivendor/glfw/include -Ivendor/glad
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/Debug-linux-x86_64/C78Engine
TARGET = $(TARGETDIR)/libC78Engine.so
OBJDIR = ../bin-int/Debug-linux-x86_64/C78Engine
DEFINES += -DC78_PLATFORM_LINUX -DC78_BUILD_DLL -DGLFW_INCLUDE_NONE -DC78_DEBUG -DC78_ENABLE_ASSERTS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g -MD
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g -std=c++20 -MD
LIBS += vendor/glfw/bin/Debug-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Debug-linux-x86_64/GLAD/libGLAD.a -lGL
LDDEPS += vendor/glfw/bin/Debug-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Debug-linux-x86_64/GLAD/libGLAD.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,-soname=libC78Engine.so
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Debug-linux-x86_64/C78Engine/libC78Engine.so ../bin/Debug-linux-x86_64/C78TestApp
endef

else ifeq ($(config),release)
TARGETDIR = ../bin/Release-linux-x86_64/C78Engine
TARGET = $(TARGETDIR)/libC78Engine.so
OBJDIR = ../bin-int/Release-linux-x86_64/C78Engine
DEFINES += -DC78_PLATFORM_LINUX -DC78_BUILD_DLL -DGLFW_INCLUDE_NONE -DC78_RELEASE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -fPIC -MD
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -fPIC -std=c++20 -MD
LIBS += vendor/glfw/bin/Release-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Release-linux-x86_64/GLAD/libGLAD.a -lGL
LDDEPS += vendor/glfw/bin/Release-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Release-linux-x86_64/GLAD/libGLAD.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,-soname=libC78Engine.so -s
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Release-linux-x86_64/C78Engine/libC78Engine.so ../bin/Release-linux-x86_64/C78TestApp
endef

else ifeq ($(config),dist)
TARGETDIR = ../bin/Dist-linux-x86_64/C78Engine
TARGET = $(TARGETDIR)/libC78Engine.so
OBJDIR = ../bin-int/Dist-linux-x86_64/C78Engine
DEFINES += -DC78_PLATFORM_LINUX -DC78_BUILD_DLL -DGLFW_INCLUDE_NONE -DC78_DIST
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -fPIC -MD
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -fPIC -std=c++20 -MD
LIBS += vendor/glfw/bin/Dist-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Dist-linux-x86_64/GLAD/libGLAD.a -lGL
LDDEPS += vendor/glfw/bin/Dist-linux-x86_64/GLFW/libGLFW.a vendor/glad/bin/Dist-linux-x86_64/GLAD/libGLAD.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,-soname=libC78Engine.so -s
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Dist-linux-x86_64/C78Engine/libC78Engine.so ../bin/Dist-linux-x86_64/C78TestApp
endef

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/C78ePCH.o
GENERATED += $(OBJDIR)/Layer.o
GENERATED += $(OBJDIR)/LayerStack.o
GENERATED += $(OBJDIR)/Log.o
GENERATED += $(OBJDIR)/Window.o
GENERATED += $(OBJDIR)/WindowsWindow.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/C78ePCH.o
OBJECTS += $(OBJDIR)/Layer.o
OBJECTS += $(OBJDIR)/LayerStack.o
OBJECTS += $(OBJDIR)/Log.o
OBJECTS += $(OBJDIR)/Window.o
OBJECTS += $(OBJDIR)/WindowsWindow.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking C78Engine
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning C78Engine
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/Application.o: src/C78e/Application.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: src/C78e/Layer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LayerStack.o: src/C78e/LayerStack.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Log.o: src/C78e/Log.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Window.o: src/C78e/Window.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/C78ePCH.o: src/C78ePCH.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/WindowsWindow.o: src/Platform/Windows/WindowsWindow.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif